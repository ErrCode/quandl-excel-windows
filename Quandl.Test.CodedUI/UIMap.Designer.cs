// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Quandl.Test.CodedUI
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinListItem uIBlankworkbookListItem = this.UIExcelWindow.UIFeaturedList.UIBlankworkbookListItem;
            WinTabPage uIQuandlTabPage = this.UIExcelWindow.UIItemWindow.UIRibbonClient.UIQuandlTabPage;
            WinButton uIGetDataButton = this.UIExcelWindow.UIItemWindow.UIDataToolBar.UIGetDataButton;
            WinEdit uIItemEdit = this.UIUntitledNotepadWindow.UIItemWindow.UIItemEdit;
            WpfCustom uIItemCustom = this.UIItemWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIItemCustom;
            WinClient uIBook1Client = this.UIExcelWindow.UIItemWindow1.UIBook1ExcelClient.UIBook1Client;
            WpfEdit uIApiKeyEdit = this.UIItemWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIApiKeyEdit;
            WpfEdit uIPasswordEdit = this.UIItemWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIPasswordEdit;
            WinButton uISpeakers67Button = this.UIUserPromotedNotificaWindow.UIUserPromotedNotificaToolBar.UISpeakers67Button;
            #endregion

            // Launch '%ProgramFiles%\Microsoft Office\root\Office16\EXCEL.EXE'
            ApplicationUnderTest eXCELApplication = ApplicationUnderTest.Launch(this.RecordedMethod1Params.ExePath, this.RecordedMethod1Params.AlternateExePath);

            // Click 'Blank workbook' list item
            Mouse.Click(uIBlankworkbookListItem, new Point(107, 219));

            // Click 'Quandl' tab
            Mouse.Click(uIQuandlTabPage, new Point(26, 18));

            // Click 'Get Data' button
            Mouse.Click(uIGetDataButton, new Point(14, 38));

            // Type 'Control + c' in text box
            Keyboard.SendKeys(uIItemEdit, this.RecordedMethod1Params.UIItemEditSendKeys, ModifierKeys.Control);

            // Last mouse action was not recorded.

            // Click custom control while pressing Control
            Mouse.Click(uIItemCustom, MouseButtons.Left, ModifierKeys.Control, new Point(270, 272));

            // Type 'Control + v' in 'Book1' client
            Keyboard.SendKeys(uIBook1Client, this.RecordedMethod1Params.UIBook1ClientSendKeys, ModifierKeys.Control);

            // Click custom control while pressing Control
            Mouse.Click(uIItemCustom, MouseButtons.Left, ModifierKeys.Control, new Point(270, 272));

            // Click 'apiKey' text box
            Mouse.Click(uIApiKeyEdit, new Point(62, 23));

            // Click 'apiKey' text box
            Mouse.Click(uIApiKeyEdit, new Point(54, 13));

            // Click 'apiKey' text box
            Mouse.Click(uIApiKeyEdit, new Point(54, 13));

            // Double-Click 'apiKey' text box
            Mouse.DoubleClick(uIApiKeyEdit, new Point(54, 13));

            // Click 'apiKey' text box
            Mouse.Click(uIApiKeyEdit, new Point(54, 13));

            // Click 'password' text box
            Mouse.Click(uIPasswordEdit, new Point(18, 2));

            // Click 'password' text box
            Mouse.Click(uIPasswordEdit, new Point(18, 2));

            // Click 'Speakers: 67%' button
            Mouse.Click(uISpeakers67Button, new Point(15, 31));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public UIExcelWindow UIExcelWindow
        {
            get
            {
                if ((this.mUIExcelWindow == null))
                {
                    this.mUIExcelWindow = new UIExcelWindow();
                }
                return this.mUIExcelWindow;
            }
        }
        
        public UIUntitledNotepadWindow UIUntitledNotepadWindow
        {
            get
            {
                if ((this.mUIUntitledNotepadWindow == null))
                {
                    this.mUIUntitledNotepadWindow = new UIUntitledNotepadWindow();
                }
                return this.mUIUntitledNotepadWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIUserPromotedNotificaWindow UIUserPromotedNotificaWindow
        {
            get
            {
                if ((this.mUIUserPromotedNotificaWindow == null))
                {
                    this.mUIUserPromotedNotificaWindow = new UIUserPromotedNotificaWindow();
                }
                return this.mUIUserPromotedNotificaWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private UIExcelWindow mUIExcelWindow;
        
        private UIUntitledNotepadWindow mUIUntitledNotepadWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIUserPromotedNotificaWindow mUIUserPromotedNotificaWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%ProgramFiles%\Microsoft Office\root\Office16\EXCEL.EXE'
        /// </summary>
        public string ExePath = "C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\EXCEL.EXE";
        
        /// <summary>
        /// Launch '%ProgramFiles%\Microsoft Office\root\Office16\EXCEL.EXE'
        /// </summary>
        public string AlternateExePath = "%ProgramFiles%\\Microsoft Office\\root\\Office16\\EXCEL.EXE";
        
        /// <summary>
        /// Type 'Control + c' in text box
        /// </summary>
        public string UIItemEditSendKeys = "c";
        
        /// <summary>
        /// Type 'Control + v' in 'Book1' client
        /// </summary>
        public string UIBook1ClientSendKeys = "v";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIExcelWindow : WinWindow
    {
        
        public UIExcelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Excel";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "XLMAIN";
            this.WindowTitles.Add("Excel");
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public UIFeaturedList UIFeaturedList
        {
            get
            {
                if ((this.mUIFeaturedList == null))
                {
                    this.mUIFeaturedList = new UIFeaturedList(this);
                }
                return this.mUIFeaturedList;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIFeaturedList mUIFeaturedList;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFeaturedList : WinList
    {
        
        public UIFeaturedList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Featured";
            this.WindowTitles.Add("Excel");
            #endregion
        }
        
        #region Properties
        public WinListItem UIBlankworkbookListItem
        {
            get
            {
                if ((this.mUIBlankworkbookListItem == null))
                {
                    this.mUIBlankworkbookListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIBlankworkbookListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Blank workbook";
                    this.mUIBlankworkbookListItem.WindowTitles.Add("Excel");
                    #endregion
                }
                return this.mUIBlankworkbookListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIBlankworkbookListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Ribbon";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NetUIHWND";
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public UIRibbonClient UIRibbonClient
        {
            get
            {
                if ((this.mUIRibbonClient == null))
                {
                    this.mUIRibbonClient = new UIRibbonClient(this);
                }
                return this.mUIRibbonClient;
            }
        }
        
        public UIDataToolBar UIDataToolBar
        {
            get
            {
                if ((this.mUIDataToolBar == null))
                {
                    this.mUIDataToolBar = new UIDataToolBar(this);
                }
                return this.mUIDataToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonClient mUIRibbonClient;
        
        private UIDataToolBar mUIDataToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRibbonClient : WinClient
    {
        
        public UIRibbonClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIQuandlTabPage
        {
            get
            {
                if ((this.mUIQuandlTabPage == null))
                {
                    this.mUIQuandlTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIQuandlTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Quandl";
                    this.mUIQuandlTabPage.WindowTitles.Add("Book1 - Excel");
                    #endregion
                }
                return this.mUIQuandlTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIQuandlTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDataToolBar : WinToolBar
    {
        
        public UIDataToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Data";
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public WinButton UIGetDataButton
        {
            get
            {
                if ((this.mUIGetDataButton == null))
                {
                    this.mUIGetDataButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIGetDataButton.SearchProperties[WinButton.PropertyNames.Name] = "Get Data";
                    this.mUIGetDataButton.WindowTitles.Add("Book1 - Excel");
                    #endregion
                }
                return this.mUIGetDataButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIGetDataButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "XLDESK";
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public UIBook1ExcelClient UIBook1ExcelClient
        {
            get
            {
                if ((this.mUIBook1ExcelClient == null))
                {
                    this.mUIBook1ExcelClient = new UIBook1ExcelClient(this);
                }
                return this.mUIBook1ExcelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIBook1ExcelClient mUIBook1ExcelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBook1ExcelClient : WinClient
    {
        
        public UIBook1ExcelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public WinClient UIBook1Client
        {
            get
            {
                if ((this.mUIBook1Client == null))
                {
                    this.mUIBook1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUIBook1Client.SearchProperties[WinControl.PropertyNames.Name] = "Book1";
                    this.mUIBook1Client.WindowTitles.Add("Book1 - Excel");
                    #endregion
                }
                return this.mUIBook1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIBook1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUntitledNotepadWindow : WinWindow
    {
        
        public UIUntitledNotepadWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Untitled - Notepad";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Notepad";
            this.WindowTitles.Add("Untitled - Notepad");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "15";
            this.WindowTitles.Add("Untitled - Notepad");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Untitled - Notepad");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = " ";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MsoWorkPane";
            this.WindowTitles.Add(" ");
            #endregion
        }
        
        #region Properties
        public UIWpfElementHostWindow UIWpfElementHostWindow
        {
            get
            {
                if ((this.mUIWpfElementHostWindow == null))
                {
                    this.mUIWpfElementHostWindow = new UIWpfElementHostWindow(this);
                }
                return this.mUIWpfElementHostWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIWpfElementHostWindow mUIWpfElementHostWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfElementHostWindow : WinWindow
    {
        
        public UIWpfElementHostWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "wpfElementHost";
            this.WindowTitles.Add(" ");
            #endregion
        }
        
        #region Properties
        public UIWpfElementHostClient UIWpfElementHostClient
        {
            get
            {
                if ((this.mUIWpfElementHostClient == null))
                {
                    this.mUIWpfElementHostClient = new UIWpfElementHostClient(this);
                }
                return this.mUIWpfElementHostClient;
            }
        }
        #endregion
        
        #region Fields
        private UIWpfElementHostClient mUIWpfElementHostClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfElementHostClient : WinClient
    {
        
        public UIWpfElementHostClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add(" ");
            #endregion
        }
        
        #region Properties
        public UIItemPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane(this);
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private UIItemPane mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemPane : WpfPane
    {
        
        public UIItemPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add(" ");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WizardGuide";
            this.WindowTitles.Add(" ");
            #endregion
        }
        
        #region Properties
        public UIQuandlExcelAddincompPane UIQuandlExcelAddincompPane
        {
            get
            {
                if ((this.mUIQuandlExcelAddincompPane == null))
                {
                    this.mUIQuandlExcelAddincompPane = new UIQuandlExcelAddincompPane(this);
                }
                return this.mUIQuandlExcelAddincompPane;
            }
        }
        #endregion
        
        #region Fields
        private UIQuandlExcelAddincompPane mUIQuandlExcelAddincompPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlExcelAddincompPane : WpfPane
    {
        
        public UIQuandlExcelAddincompPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "stepFrame";
            this.WindowTitles.Add(" ");
            #endregion
        }
        
        #region Properties
        public WpfCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Login";
                    this.mUIItemCustom.WindowTitles.Add(" ");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        
        public WpfEdit UIApiKeyEdit
        {
            get
            {
                if ((this.mUIApiKeyEdit == null))
                {
                    this.mUIApiKeyEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIApiKeyEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "apiKey";
                    this.mUIApiKeyEdit.WindowTitles.Add(" ");
                    #endregion
                }
                return this.mUIApiKeyEdit;
            }
        }
        
        public WpfEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "password";
                    this.mUIPasswordEdit.WindowTitles.Add(" ");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUIItemCustom;
        
        private WpfEdit mUIApiKeyEdit;
        
        private WpfEdit mUIPasswordEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUserPromotedNotificaWindow : WinWindow
    {
        
        public UIUserPromotedNotificaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "User Promoted Notification Area";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ToolbarWindow32";
            this.WindowTitles.Add("User Promoted Notification Area");
            #endregion
        }
        
        #region Properties
        public UIUserPromotedNotificaToolBar UIUserPromotedNotificaToolBar
        {
            get
            {
                if ((this.mUIUserPromotedNotificaToolBar == null))
                {
                    this.mUIUserPromotedNotificaToolBar = new UIUserPromotedNotificaToolBar(this);
                }
                return this.mUIUserPromotedNotificaToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIUserPromotedNotificaToolBar mUIUserPromotedNotificaToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUserPromotedNotificaToolBar : WinToolBar
    {
        
        public UIUserPromotedNotificaToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "User Promoted Notification Area";
            this.WindowTitles.Add("User Promoted Notification Area");
            #endregion
        }
        
        #region Properties
        public WinButton UISpeakers67Button
        {
            get
            {
                if ((this.mUISpeakers67Button == null))
                {
                    this.mUISpeakers67Button = new WinButton(this);
                    #region Search Criteria
                    this.mUISpeakers67Button.SearchProperties[WinButton.PropertyNames.Name] = "Speakers: 67%";
                    this.mUISpeakers67Button.WindowTitles.Add("User Promoted Notification Area");
                    #endregion
                }
                return this.mUISpeakers67Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISpeakers67Button;
        #endregion
    }
}
